
dat Filter{
    x: ℝ , v: ℝ, a: ℝ;
    def Filter(x: ℝ,v: ℝ, a: ℝ){
        (this.x,this.v,this.a) = (x,v,a);
    }
    // update step: compute new state after one time step
    def update(t: ℝ){
        x = x + t*v;
        v = v + t*a;
        a = a + t*Gauss(0,1); 
    }
    // measure x position with noise
    def measureX(x: ℝ, t: ℝ){
        //observe(this.x + Gauss(0,1) == x); // TODO
        o := this.x + t*Gauss(0,1);
        cobserve(o,x);
    }
}

def main(){
    data := [1,3,6,10,15];
    filter := Filter(0,0,0);
    for i in [0..data.length){
        filter.update(1);
        filter.measureX(data[i],1);
    }
    return (filter.x,filter.v,filter.a); // expected: e^(-127303·⅟801+-3·a·x·⅟8+-43·x²·⅟48+-65·a²·⅟144+-65·v²·⅟144+-77·v·⅟18+17·v·x·⅟24+25·a·⅟18+45·x·⅟2+49·a·v·⅟72)·⅟24·⅟π^(3·⅟2)·⅟√3̅·√8̅9̅
}
