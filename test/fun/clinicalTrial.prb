// TODO: make array literals as fast as built-in 'array' calls
def main(){
    //controlGroup := [0,0,1,0,0];
    controlGroup := array(5);
    controlGroup[0]=0;controlGroup[1]=0;controlGroup[2]=1;controlGroup[3]=0;controlGroup[4]=0;
    //treatedGroup := [1,0,1,1,1];
    treatedGroup := array(5);
    treatedGroup[0]=1;treatedGroup[1]=0;treatedGroup[2]=1;treatedGroup[3]=1;treatedGroup[4]=1;

    isEffective := Bernoulli(1/2);
    probIfTreated := Beta(1,1);
    probIfControl := if isEffective { Beta(1,1) } else { probIfTreated };

    for i in [0..controlGroup.length){
        observe(controlGroup[i] == Bernoulli(probIfControl));
    }
    for i in [0..treatedGroup.length){
        observe(treatedGroup[i] == Bernoulli(probIfTreated));
    }

    isEffectiveP := FromMarginal(isEffective);
    observe(isEffective);
    return (isEffectiveP,probIfTreated,probIfControl); // expected: (-124740000·probIfControl³·probIfTreated⁵+-20790000·probIfControl·probIfTreated⁵+-20790000·probIfControl⁵·probIfTreated⁵+-83160000·probIfControl²·probIfTreated⁴+-83160000·probIfControl⁴·probIfTreated⁴+124740000·probIfControl³·probIfTreated⁴+20790000·probIfControl·probIfTreated⁴+20790000·probIfControl⁵·probIfTreated⁴+83160000·probIfControl²·probIfTreated⁵+83160000·probIfControl⁴·probIfTreated⁵)·(δ[-isEffectiveP+1]·⅟30600+δ[-isEffectiveP]·⅟94248)·[-1+probIfControl≤0]·[-1+probIfTreated≤0]·[-probIfControl≤0]·[-probIfTreated≤0]
    // TODO: keep polynomial in factored form
}
